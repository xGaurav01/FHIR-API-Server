{
	"info": {
		"_postman_id": "ec1f7201-076c-41fc-afbf-ab9111cd0891",
		"name": "FHIR Sever",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33292977"
	},
	"item": [
		{
			"name": "RegisterUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Ensure the request payload is correct",
							"pm.test(\"Request payload is correct\", function () {",
							"    let requestData = pm.request.body.raw;",
							"    console.log(\"Request Payload: \", requestData);",
							"    ",
							"    let parsedRequest = JSON.parse(requestData);",
							"    pm.expect(parsedRequest).to.have.property(\"username\").that.is.a(\"string\");",
							"    pm.expect(parsedRequest).to.have.property(\"password\").that.is.a(\"string\");",
							"});",
							"",
							"// Set the expected status code and message",
							"const expectedStatusCode = pm.environment.get(\"expectedStatusCode\") || 200;",
							"const expectedMessage = pm.environment.get(\"expectedMessage\") || \"User registered successfully\";",
							"",
							"// Validate the response status code",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.response.to.have.status(expectedStatusCode);",
							"});",
							"",
							"// Validate the response message",
							"pm.test(\"Response message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(expectedMessage);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\":225,\n    \"username\":\"225test\",\n    \"password\":\"tester@123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set the expected status code and message",
							"const expectedStatusCode = pm.environment.get(\"expectedStatusCode\") || 200;",
							"const expectedMessage = pm.environment.get(\"expectedMessage\") || \"Logged in Successfully!\";",
							"",
							"// Validate the response status code",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.response.to.have.status(expectedStatusCode);",
							"});",
							"",
							"// Validate the response message",
							"pm.test(\"Response message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(expectedMessage);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\":\"test\",\n    \"password\":\"tester@123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPatient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if the response message is correct",
							"pm.test(\"Response message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Patient Data Fetched Successfully!!\");",
							"});",
							"",
							"// Check if the response contains patient data",
							"pm.test(\"Response contains patient data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"data\");",
							"",
							"    var data = jsonData.data;",
							"",
							"    // Check if each expected property exists and has the correct type",
							"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
							"    pm.expect(data).to.have.property(\"identifier\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"birth_date\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"gender\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"address\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"telecom\").that.satisfies(val => val === null || typeof val === \"string\");",
							"    pm.expect(data).to.have.property(\"active\").that.satisfies(val => val === null || typeof val === \"boolean\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/patients/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"patients",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreatePatient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const moment = require('moment');",
							"",
							"// Ensure the request payload is correct",
							"pm.test(\"Request payload is correct\", function () {",
							"    let requestData = pm.request.body.raw;",
							"    console.log(\"Request Payload: \", requestData);",
							"",
							"    let parsedRequest = JSON.parse(requestData);",
							"    pm.expect(parsedRequest).to.have.property(\"name\").that.is.a(\"string\");",
							"    pm.expect(parsedRequest).to.have.property(\"gender\").that.is.a(\"string\");",
							"    pm.expect(parsedRequest).to.have.property(\"address\").that.is.a(\"string\");",
							"});",
							"",
							"// Validate the response status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validate the response message",
							"pm.test(\"Response message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Patient created Successfully!!\");",
							"});",
							"",
							"// Validate the response data",
							"pm.test(\"Response contains patient data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"data\");",
							"    ",
							"    var data = jsonData.data;",
							"",
							"    pm.expect(data).to.have.property(\"id\").that.is.a(\"number\");",
							"    pm.expect(data).to.have.property(\"identifier\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"name\").that.is.a(\"string\");",
							"",
							"    // Check if birth_date exists and is in a valid date format",
							"    pm.expect(data).to.have.property(\"birth_date\").that.is.a(\"string\");",
							"    var responseDate = moment(data.birth_date, moment.ISO_8601, true);",
							"    pm.expect(responseDate.isValid()).to.be.true;",
							"",
							"    pm.expect(data).to.have.property(\"gender\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"address\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"telecom\").that.satisfies(val => val === null || typeof val === \"string\");",
							"    pm.expect(data).to.have.property(\"active\").that.satisfies(val => val === null || typeof val === \"boolean\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\":\"117\",\n    \"identifier\": \"117\",\n    \"active\": true,\n    \"name\": \"Happy sharma\",\n    \"telecom\": \"555-1234\",\n    \"gender\": \"male\",\n    \"birth_date\": \"1980-01-01\",\n    \"address\": \"123 Main St, Anytown, USA\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/patients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"patients"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatePatient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const moment = require('moment');",
							"",
							"// Set the expected status code and message",
							"const expectedStatusCode = 200;",
							"const expectedMessage = pm.environment.get(\"expectedMessage\") || \"Updated Successfully\";",
							"",
							"// Validate the response status code",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.response.to.have.status(expectedStatusCode);",
							"});",
							"",
							"// Validate the response message",
							"pm.test(\"Response message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(expectedMessage);",
							"});",
							"",
							"// Validate the response data",
							"pm.test(\"Response contains valid patient data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"data\");",
							"    ",
							"    var data = jsonData.data;",
							"",
							"    pm.expect(data).to.have.property(\"resourceType\").that.is.a(\"string\");",
							"    pm.expect(data).to.have.property(\"id\").that.is.a(\"string\");",
							"",
							"    // Check identifier",
							"    pm.expect(data).to.have.property(\"identifier\").that.is.an('array');",
							"    pm.expect(data.identifier[0]).to.have.property(\"value\").that.is.a(\"string\");",
							"",
							"    // Check active status",
							"    pm.expect(data).to.have.property(\"active\").that.is.a(\"boolean\");",
							"",
							"    // Check name",
							"    pm.expect(data).to.have.property(\"name\").that.is.an('array');",
							"    pm.expect(data.name[0]).to.have.property(\"text\").that.is.a(\"string\");",
							"",
							"    // Check telecom",
							"    pm.expect(data).to.have.property(\"telecom\").that.is.an('array');",
							"    pm.expect(data.telecom[0]).to.have.property(\"value\").that.is.a(\"string\");",
							"",
							"    // Check gender",
							"    pm.expect(data).to.have.property(\"gender\").that.is.a(\"string\");",
							"",
							"    // Convert and check birth date",
							"    pm.expect(data).to.have.property(\"birth_date\").that.is.a(\"string\");",
							"    var responseDate = moment(data.birth_date, moment.ISO_8601, true);",
							"    pm.expect(responseDate.isValid()).to.be.true;",
							"",
							"    // Check address",
							"    pm.expect(data).to.have.property(\"address\").that.is.an('array');",
							"    pm.expect(data.address[0]).to.have.property(\"text\").that.is.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\":\"2\",\n    \"identifier\": \"67890\",\n    \"active\": true,\n    \"name\": \"Gaurav\",\n    \"telecom\": \"555-1234\",\n    \"gender\": \"male\",\n    \"birth_date\": \"1980-01-01\",\n    \"address\": \"123 Main St, Anytown, USA\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/patients/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"patients",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletePatient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set the expected status code and message",
							"const expectedStatusCode = pm.environment.get(\"expectedStatusCode\") || 200;",
							"const expectedMessage = pm.environment.get(\"expectedMessage\") || \"Patient Deleted Successfully!!\";",
							"",
							"// Validate the response status code",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.response.to.have.status(expectedStatusCode);",
							"});",
							"",
							"// Validate the response message",
							"pm.test(\"Response message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(expectedMessage);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/patients/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"patients",
						"4"
					]
				}
			},
			"response": []
		}
	]
}